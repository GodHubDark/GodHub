loadstring([[
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local MarketplaceService = game:GetService("MarketplaceService")
local PlaceId = game.PlaceId
local ProductInfo = MarketplaceService:GetProductInfo(PlaceId)
local GameName = ProductInfo.Name

Fluent:Notify({ Title = "Script executado com sucesso", Content = "VocÃª estÃ¡ usando GodHub" })

local Window = Fluent:CreateWindow({
    Title = "GodHub",  -- Alterado para GodHub
    SubTitle = "-- " .. GameName,
    TabWidth = 102,
    Size = UDim2.fromOffset(450, 320),
    Acrylic = false,
    Theme = "dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "sword" }),
    AutoRaid = Window:AddTab({ Title = "Auto Raid", Icon = "skull" }),
    Creditos = Window:AddTab({ Title = "CrÃ©ditos", Icon = "heart" })
}

local autoEnergy = false
local autoRank = false
local autoRaid = false
local autoMap = false
local autoDifficulty = false
local autoStartRaid = false
local selectedDifficulty = false  -- Inicializando como 'false', sem dificuldade selecionada
local selectedMap = false  -- Inicializando como 'false', sem mapa selecionado
local autoKill = false  -- VariÃ¡vel para controlar o Auto Kill
local autoTrickUpgrade = false  -- VariÃ¡vel para controlar o "Trick Upgrade"

-- Toggle Auto Energy
Tabs.AutoFarm:AddToggle("Auto Energy", {
    Title = "Auto Energy",
    Default = false
}):OnChanged(function(Value)
    autoEnergy = Value
    if autoEnergy then
        task.spawn(function()
            while autoEnergy do
                local args = {
                    [1] = {
                        [1] = {
                            [1] = "\3",
                            [2] = "Click",
                            [3] = "Execute"
                        }
                    }
                }
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
                wait(0.1)
            end
        end)
    end
end)

-- Toggle Auto Rank
Tabs.AutoFarm:AddToggle("Auto Rank", {
    Title = "Auto Rank",
    Default = false
}):OnChanged(function(Value)
    autoRank = Value
    if autoRank then
        task.spawn(function()
            while autoRank do
                local args = {
                    [1] = {
                        [1] = {
                            [1] = "\3",
                            [2] = "Rank",
                            [3] = "Upgrade"
                        }
                    }
                }
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
                wait(1)
            end
        end)
    end
end)

-- Toggle Auto Trick Upgrade (Novo Toggle)
Tabs.AutoFarm:AddToggle("Auto Trick Upgrade", {
    Title = "Auto Trick Upgrade",
    Default = false
}):OnChanged(function(Value)
    autoTrickUpgrade = Value
    if autoTrickUpgrade then
        task.spawn(function()
            while autoTrickUpgrade do
                local args = {
                    [1] = {
                        [1] = {
                            [1] = "\3",
                            [2] = "Trick",
                            [3] = "Upgrade"
                        }
                    }
                }
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
                wait(1)  -- Ajuste o tempo conforme necessÃ¡rio
            end
        end)
    end
end)

-- Toggle Auto Raid
Tabs.AutoRaid:AddToggle("Auto Raid", {
    Title = "Auto Raid",
    Default = false
}):OnChanged(function(Value)
    autoRaid = Value
    if autoRaid then
        task.spawn(function()
            while autoRaid do
                local args = {
                    [1] = {
                        [1] = {
                            [1] = "\3",
                            [2] = "Raid",
                            [3] = "Create"
                        }
                    }
                }
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
                wait(5)
            end
        end)
    end
end)

-- Toggle Auto Start Raid
Tabs.AutoRaid:AddToggle("Auto Start Raid", {
    Title = "Auto Start Raid",
    Default = false
}):OnChanged(function(Value)
    autoStartRaid = Value
    if autoStartRaid then
        task.spawn(function()
            while autoStartRaid do
                -- Iniciar o raid automaticamente apÃ³s ser criado
                local args = {
                    [1] = {
                        [1] = {
                            [1] = "\3",
                            [2] = "Raid",
                            [3] = "Start"
                        }
                    }
                }
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
                wait(5)  -- Atraso para evitar mÃºltiplos inÃ­cios rÃ¡pidos
            end
        end)
    end
end)

-- Toggle Auto Map
Tabs.AutoRaid:AddToggle("Auto Map", {
    Title = "Selecionar Mapa",
    Default = false
}):OnChanged(function(Value)
    autoMap = Value
    if autoMap then
        task.spawn(function()
            while autoMap do
                local args = {
                    [1] = {
                        [1] = {
                            [1] = "\3",
                            [2] = "Raid",
                            [3] = "SelectMap",
                            [4] = selectedMap
                        }
                    }
                }
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
                wait(5)
            end
        end)
    end
end)

-- Dropdown para Selecionar Dificuldade na aba Auto Raid (agora comeÃ§ando como false)
Tabs.AutoRaid:AddDropdown({
    Title = "Selecionar Dificuldade",
    Default = selectedDifficulty or "Easy",  -- Usa "Easy" como fallback se for 'false'
    Options = { "Easy", "Medium", "Hard", "Insane", "Extreme", "Impossible" },
    MultiSelect = false
}):OnChanged(function(Value)
    selectedDifficulty = Value
    Fluent:Notify({ Title = "Dificuldade Atualizada", Content = "Dificuldade definida para " .. selectedDifficulty })
end)

-- Dropdown para Selecionar Mapa na aba Auto Raid (agora comeÃ§ando como false)
Tabs.AutoRaid:AddDropdown({
    Title = "Selecionar Mapa",
    Default = selectedMap or "Coastline",  -- Usa "Coastline" como fallback se for 'false'
    Options = { "Coastline", "Desert", "Mountain", "Forest", "City" },
    MultiSelect = false
}):OnChanged(function(Value)
    selectedMap = Value
    Fluent:Notify({ Title = "Mapa Atualizado", Content = "Mapa definido para " .. selectedMap })
end)

-- CrÃ©ditos
Tabs.Creditos:AddParagraph({
    Title = "Criado por GodHub",  -- Alterado para GodHub
    Content = "Aproveite o script! Desenvolvido por GodHub para facilitar seu jogo."
})
Tabs.Creditos:AddParagraph({
    Title = "Apoio",
    Content = "Agradecimentos a Fluent por fornecer a interface visual incrÃ­vel!"
})
]])()